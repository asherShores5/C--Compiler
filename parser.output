Nonterminals useless in grammar

    VarDeclList
    WhileStart
    $@2
    BinOp


Terminals unused in grammar

    WHILE


Rules useless in grammar

   63 VarDeclList: ε
   64            | VarDecl VarDeclList
   65            | VarDecl

   66 $@2: ε

   67 WhileStart: WHILE LPAREN $@2 WhileLoop

   68 BinOp: PLUS
   69      | MINUS
   70      | TIMES
   71      | DIVIDE


State 1 conflicts: 1 reduce/reduce
State 2 conflicts: 1 reduce/reduce
State 18 conflicts: 2 reduce/reduce
State 24 conflicts: 11 shift/reduce
State 60 conflicts: 1 reduce/reduce
State 97 conflicts: 1 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl
    4         | ε
    5         | FunDeclList

    6 Decl: VarDecl
    7     | StmtList

    8 VarDecl: Type ID SEMICOLON
    9        | Type ID LBRACKET INTEGER RBRACKET SEMICOLON

   10 FunDeclList: FunDecl
   11            | FunDecl FunDeclList

   12 $@1: ε

   13 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN Block

   14 ParamDecList: ε
   15             | ParamDecListTail

   16 ParamDecListTail: ParamDecl
   17                 | ParamDecl ParamDecListTail

   18 ParamDecl: Type ID

   19 Block: LCURLY DeclList RCURLY

   20 Type: INT
   21     | FLOAT
   22     | CHAR

   23 StmtList: Stmt
   24         | Stmt StmtList

   25 Stmt: SEMICOLON
   26     | WhileLoop
   27     | IfStmt
   28     | Expr SEMICOLON
   29     | RETURN Expr SEMICOLON
   30     | WRITE Expr SEMICOLON
   31     | WRITELN SEMICOLON

   32 IfStmt: IF LPAREN Condition RPAREN Block Else

   33 WhileLoop: Condition RPAREN Block

   34 Condition: Primary LOGICOP Primary

   35 Else: ε
   36     | ELSE Block

   37 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ Primary
   38          | ID EQ ID LBRACKET INTEGER RBRACKET

   39 Expr: Primary
   40     | MathExpr
   41     | ArrayExpr
   42     | UnaryOp Expr
   43     | ID EQ Expr
   44     | ID LPAREN ParamList RPAREN
   45     | ID LBRACKET INTEGER RBRACKET

   46 Primary: ID
   47        | DECIMAL
   48        | INTEGER
   49        | CHARACTER

   50 MathExpr: Trm
   51         | MathExpr MINUS Trm
   52         | MathExpr PLUS Trm

   53 Trm: Factor
   54    | Trm TIMES Factor
   55    | Trm DIVIDE Factor

   56 Factor: ID
   57       | INTEGER
   58       | LPAREN MathExpr RPAREN

   59 ParamList: ε

   60 $@3: ε

   61 ParamList: Primary $@3 ParamList

   62 UnaryOp: MINUS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <string> (258) 8 9 13 18 37 38 43 44 45 46 56
    INTEGER <number> (259) 9 37 38 45 48 57
    DECIMAL <floatValue> (260) 47
    SEMICOLON <string> (261) 8 9 25 28 29 30 31
    EQ <string> (262) 37 38 43
    WRITE <string> (263) 30
    FUNC <string> (264) 13
    IF <string> (265) 32
    ELSE <string> (266) 36
    WHILE <string> (267)
    PLUS <string> (268) 52
    MINUS <string> (269) 51 62
    TIMES <string> (270) 54
    DIVIDE <string> (271) 55
    LOGICOP <string> (272) 34
    LBRACKET <string> (273) 9 37 38 45
    RBRACKET <string> (274) 9 37 38 45
    LPAREN <string> (275) 13 32 44 58
    RPAREN <string> (276) 13 32 33 44 58
    LCURLY <string> (277) 19
    RCURLY <string> (278) 19
    INT <string> (279) 20
    CHAR <string> (280) 22
    FLOAT <string> (281) 21
    RETURN <string> (282) 29
    WRITELN <string> (283) 31
    CHARACTER <string> (284) 49


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Program <ast> (31)
        on left: 1
        on right: 0
    DeclList <ast> (32)
        on left: 2 3 4 5
        on right: 1 2 19
    Decl <ast> (33)
        on left: 6 7
        on right: 2 3
    VarDecl <ast> (34)
        on left: 8 9
        on right: 6
    FunDeclList <ast> (35)
        on left: 10 11
        on right: 5 11
    FunDecl <ast> (36)
        on left: 13
        on right: 10 11
    $@1 (37)
        on left: 12
        on right: 13
    ParamDecList <ast> (38)
        on left: 14 15
        on right: 13
    ParamDecListTail <ast> (39)
        on left: 16 17
        on right: 15 17
    ParamDecl <ast> (40)
        on left: 18
        on right: 16 17
    Block <ast> (41)
        on left: 19
        on right: 13 32 33 36
    Type <ast> (42)
        on left: 20 21 22
        on right: 8 9 13 18
    StmtList <ast> (43)
        on left: 23 24
        on right: 7 24
    Stmt <ast> (44)
        on left: 25 26 27 28 29 30 31
        on right: 23 24
    IfStmt <ast> (45)
        on left: 32
        on right: 27
    WhileLoop <ast> (46)
        on left: 33
        on right: 26
    Condition <ast> (47)
        on left: 34
        on right: 32 33
    Else <ast> (48)
        on left: 35 36
        on right: 32
    ArrayExpr <ast> (49)
        on left: 37 38
        on right: 41
    Expr <ast> (50)
        on left: 39 40 41 42 43 44 45
        on right: 28 29 30 42 43
    Primary <ast> (51)
        on left: 46 47 48 49
        on right: 34 37 39 61
    MathExpr <ast> (52)
        on left: 50 51 52
        on right: 40 51 52 58
    Trm <ast> (53)
        on left: 53 54 55
        on right: 50 51 52 54 55
    Factor <ast> (54)
        on left: 56 57 58
        on right: 53 54 55
    ParamList <ast> (55)
        on left: 59 61
        on right: 44 61
    $@3 (56)
        on left: 60
        on right: 61
    UnaryOp <ast> (57)
        on left: 62
        on right: 42


State 0

    0 $accept: • Program $end

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    INT        shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    RETURN     shift, and go to state 13
    WRITELN    shift, and go to state 14
    CHARACTER  shift, and go to state 15

    $default  reduce using rule 4 (DeclList)

    Program      go to state 16
    DeclList     go to state 17
    Decl         go to state 18
    VarDecl      go to state 19
    FunDeclList  go to state 20
    FunDecl      go to state 21
    Type         go to state 22
    StmtList     go to state 23
    Stmt         go to state 24
    IfStmt       go to state 25
    WhileLoop    go to state 26
    Condition    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    Primary      go to state 30
    MathExpr     go to state 31
    Trm          go to state 32
    Factor       go to state 33
    UnaryOp      go to state 34


State 1

   37 ArrayExpr: ID • LBRACKET INTEGER RBRACKET EQ Primary
   38          | ID • EQ ID LBRACKET INTEGER RBRACKET
   43 Expr: ID • EQ Expr
   44     | ID • LPAREN ParamList RPAREN
   45     | ID • LBRACKET INTEGER RBRACKET
   46 Primary: ID •
   56 Factor: ID •

    EQ        shift, and go to state 35
    LBRACKET  shift, and go to state 36
    LPAREN    shift, and go to state 37

    SEMICOLON  reduce using rule 46 (Primary)
    SEMICOLON  [reduce using rule 56 (Factor)]
    LOGICOP    reduce using rule 46 (Primary)
    $default   reduce using rule 56 (Factor)


State 2

   48 Primary: INTEGER •
   57 Factor: INTEGER •

    SEMICOLON  reduce using rule 48 (Primary)
    SEMICOLON  [reduce using rule 57 (Factor)]
    LOGICOP    reduce using rule 48 (Primary)
    $default   reduce using rule 57 (Factor)


State 3

   47 Primary: DECIMAL •

    $default  reduce using rule 47 (Primary)


State 4

   25 Stmt: SEMICOLON •

    $default  reduce using rule 25 (Stmt)


State 5

   30 Stmt: WRITE • Expr SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    CHARACTER  shift, and go to state 15

    ArrayExpr  go to state 28
    Expr       go to state 38
    Primary    go to state 39
    MathExpr   go to state 31
    Trm        go to state 32
    Factor     go to state 33
    UnaryOp    go to state 34


State 6

   13 FunDecl: FUNC • Type ID LPAREN $@1 ParamDecList RPAREN Block

    INT    shift, and go to state 10
    CHAR   shift, and go to state 11
    FLOAT  shift, and go to state 12

    Type  go to state 40


State 7

   32 IfStmt: IF • LPAREN Condition RPAREN Block Else

    LPAREN  shift, and go to state 41


State 8

   62 UnaryOp: MINUS •

    $default  reduce using rule 62 (UnaryOp)


State 9

   58 Factor: LPAREN • MathExpr RPAREN

    ID       shift, and go to state 42
    INTEGER  shift, and go to state 43
    LPAREN   shift, and go to state 9

    MathExpr  go to state 44
    Trm       go to state 32
    Factor    go to state 33


State 10

   20 Type: INT •

    $default  reduce using rule 20 (Type)


State 11

   22 Type: CHAR •

    $default  reduce using rule 22 (Type)


State 12

   21 Type: FLOAT •

    $default  reduce using rule 21 (Type)


State 13

   29 Stmt: RETURN • Expr SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    CHARACTER  shift, and go to state 15

    ArrayExpr  go to state 28
    Expr       go to state 45
    Primary    go to state 39
    MathExpr   go to state 31
    Trm        go to state 32
    Factor     go to state 33
    UnaryOp    go to state 34


State 14

   31 Stmt: WRITELN • SEMICOLON

    SEMICOLON  shift, and go to state 46


State 15

   49 Primary: CHARACTER •

    $default  reduce using rule 49 (Primary)


State 16

    0 $accept: Program • $end

    $end  shift, and go to state 47


State 17

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 18

    2 DeclList: Decl • DeclList
    3         | Decl •

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    INT        shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    RETURN     shift, and go to state 13
    WRITELN    shift, and go to state 14
    CHARACTER  shift, and go to state 15

    $end      reduce using rule 3 (DeclList)
    $end      [reduce using rule 4 (DeclList)]
    RCURLY    reduce using rule 3 (DeclList)
    RCURLY    [reduce using rule 4 (DeclList)]
    $default  reduce using rule 3 (DeclList)

    DeclList     go to state 48
    Decl         go to state 18
    VarDecl      go to state 19
    FunDeclList  go to state 20
    FunDecl      go to state 21
    Type         go to state 22
    StmtList     go to state 23
    Stmt         go to state 24
    IfStmt       go to state 25
    WhileLoop    go to state 26
    Condition    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    Primary      go to state 30
    MathExpr     go to state 31
    Trm          go to state 32
    Factor       go to state 33
    UnaryOp      go to state 34


State 19

    6 Decl: VarDecl •

    $default  reduce using rule 6 (Decl)


State 20

    5 DeclList: FunDeclList •

    $default  reduce using rule 5 (DeclList)


State 21

   10 FunDeclList: FunDecl •
   11            | FunDecl • FunDeclList

    FUNC  shift, and go to state 6

    $default  reduce using rule 10 (FunDeclList)

    FunDeclList  go to state 49
    FunDecl      go to state 21


State 22

    8 VarDecl: Type • ID SEMICOLON
    9        | Type • ID LBRACKET INTEGER RBRACKET SEMICOLON

    ID  shift, and go to state 50


State 23

    7 Decl: StmtList •

    $default  reduce using rule 7 (Decl)


State 24

   23 StmtList: Stmt •
   24         | Stmt • StmtList

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    IF         shift, and go to state 7
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    RETURN     shift, and go to state 13
    WRITELN    shift, and go to state 14
    CHARACTER  shift, and go to state 15

    ID         [reduce using rule 23 (StmtList)]
    INTEGER    [reduce using rule 23 (StmtList)]
    DECIMAL    [reduce using rule 23 (StmtList)]
    SEMICOLON  [reduce using rule 23 (StmtList)]
    WRITE      [reduce using rule 23 (StmtList)]
    IF         [reduce using rule 23 (StmtList)]
    MINUS      [reduce using rule 23 (StmtList)]
    LPAREN     [reduce using rule 23 (StmtList)]
    RETURN     [reduce using rule 23 (StmtList)]
    WRITELN    [reduce using rule 23 (StmtList)]
    CHARACTER  [reduce using rule 23 (StmtList)]
    $default   reduce using rule 23 (StmtList)

    StmtList   go to state 51
    Stmt       go to state 24
    IfStmt     go to state 25
    WhileLoop  go to state 26
    Condition  go to state 27
    ArrayExpr  go to state 28
    Expr       go to state 29
    Primary    go to state 30
    MathExpr   go to state 31
    Trm        go to state 32
    Factor     go to state 33
    UnaryOp    go to state 34


State 25

   27 Stmt: IfStmt •

    $default  reduce using rule 27 (Stmt)


State 26

   26 Stmt: WhileLoop •

    $default  reduce using rule 26 (Stmt)


State 27

   33 WhileLoop: Condition • RPAREN Block

    RPAREN  shift, and go to state 52


State 28

   41 Expr: ArrayExpr •

    $default  reduce using rule 41 (Expr)


State 29

   28 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 30

   34 Condition: Primary • LOGICOP Primary
   39 Expr: Primary •

    LOGICOP  shift, and go to state 54

    $default  reduce using rule 39 (Expr)


State 31

   40 Expr: MathExpr •
   51 MathExpr: MathExpr • MINUS Trm
   52         | MathExpr • PLUS Trm

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56

    $default  reduce using rule 40 (Expr)


State 32

   50 MathExpr: Trm •
   54 Trm: Trm • TIMES Factor
   55    | Trm • DIVIDE Factor

    TIMES   shift, and go to state 57
    DIVIDE  shift, and go to state 58

    $default  reduce using rule 50 (MathExpr)


State 33

   53 Trm: Factor •

    $default  reduce using rule 53 (Trm)


State 34

   42 Expr: UnaryOp • Expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    CHARACTER  shift, and go to state 15

    ArrayExpr  go to state 28
    Expr       go to state 59
    Primary    go to state 39
    MathExpr   go to state 31
    Trm        go to state 32
    Factor     go to state 33
    UnaryOp    go to state 34


State 35

   38 ArrayExpr: ID EQ • ID LBRACKET INTEGER RBRACKET
   43 Expr: ID EQ • Expr

    ID         shift, and go to state 60
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    CHARACTER  shift, and go to state 15

    ArrayExpr  go to state 28
    Expr       go to state 61
    Primary    go to state 39
    MathExpr   go to state 31
    Trm        go to state 32
    Factor     go to state 33
    UnaryOp    go to state 34


State 36

   37 ArrayExpr: ID LBRACKET • INTEGER RBRACKET EQ Primary
   45 Expr: ID LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 62


State 37

   44 Expr: ID LPAREN • ParamList RPAREN

    ID         shift, and go to state 63
    INTEGER    shift, and go to state 64
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 15

    $default  reduce using rule 59 (ParamList)

    Primary    go to state 65
    ParamList  go to state 66


State 38

   30 Stmt: WRITE Expr • SEMICOLON

    SEMICOLON  shift, and go to state 67


State 39

   39 Expr: Primary •

    $default  reduce using rule 39 (Expr)


State 40

   13 FunDecl: FUNC Type • ID LPAREN $@1 ParamDecList RPAREN Block

    ID  shift, and go to state 68


State 41

   32 IfStmt: IF LPAREN • Condition RPAREN Block Else

    ID         shift, and go to state 63
    INTEGER    shift, and go to state 64
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 15

    Condition  go to state 69
    Primary    go to state 70


State 42

   56 Factor: ID •

    $default  reduce using rule 56 (Factor)


State 43

   57 Factor: INTEGER •

    $default  reduce using rule 57 (Factor)


State 44

   51 MathExpr: MathExpr • MINUS Trm
   52         | MathExpr • PLUS Trm
   58 Factor: LPAREN MathExpr • RPAREN

    PLUS    shift, and go to state 55
    MINUS   shift, and go to state 56
    RPAREN  shift, and go to state 71


State 45

   29 Stmt: RETURN Expr • SEMICOLON

    SEMICOLON  shift, and go to state 72


State 46

   31 Stmt: WRITELN SEMICOLON •

    $default  reduce using rule 31 (Stmt)


State 47

    0 $accept: Program $end •

    $default  accept


State 48

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 49

   11 FunDeclList: FunDecl FunDeclList •

    $default  reduce using rule 11 (FunDeclList)


State 50

    8 VarDecl: Type ID • SEMICOLON
    9        | Type ID • LBRACKET INTEGER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 73
    LBRACKET   shift, and go to state 74


State 51

   24 StmtList: Stmt StmtList •

    $default  reduce using rule 24 (StmtList)


State 52

   33 WhileLoop: Condition RPAREN • Block

    LCURLY  shift, and go to state 75

    Block  go to state 76


State 53

   28 Stmt: Expr SEMICOLON •

    $default  reduce using rule 28 (Stmt)


State 54

   34 Condition: Primary LOGICOP • Primary

    ID         shift, and go to state 63
    INTEGER    shift, and go to state 64
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 15

    Primary  go to state 77


State 55

   52 MathExpr: MathExpr PLUS • Trm

    ID       shift, and go to state 42
    INTEGER  shift, and go to state 43
    LPAREN   shift, and go to state 9

    Trm     go to state 78
    Factor  go to state 33


State 56

   51 MathExpr: MathExpr MINUS • Trm

    ID       shift, and go to state 42
    INTEGER  shift, and go to state 43
    LPAREN   shift, and go to state 9

    Trm     go to state 79
    Factor  go to state 33


State 57

   54 Trm: Trm TIMES • Factor

    ID       shift, and go to state 42
    INTEGER  shift, and go to state 43
    LPAREN   shift, and go to state 9

    Factor  go to state 80


State 58

   55 Trm: Trm DIVIDE • Factor

    ID       shift, and go to state 42
    INTEGER  shift, and go to state 43
    LPAREN   shift, and go to state 9

    Factor  go to state 81


State 59

   42 Expr: UnaryOp Expr •

    $default  reduce using rule 42 (Expr)


State 60

   37 ArrayExpr: ID • LBRACKET INTEGER RBRACKET EQ Primary
   38          | ID • EQ ID LBRACKET INTEGER RBRACKET
   38          | ID EQ ID • LBRACKET INTEGER RBRACKET
   43 Expr: ID • EQ Expr
   44     | ID • LPAREN ParamList RPAREN
   45     | ID • LBRACKET INTEGER RBRACKET
   46 Primary: ID •
   56 Factor: ID •

    EQ        shift, and go to state 35
    LBRACKET  shift, and go to state 82
    LPAREN    shift, and go to state 37

    SEMICOLON  reduce using rule 46 (Primary)
    SEMICOLON  [reduce using rule 56 (Factor)]
    $default   reduce using rule 56 (Factor)


State 61

   43 Expr: ID EQ Expr •

    $default  reduce using rule 43 (Expr)


State 62

   37 ArrayExpr: ID LBRACKET INTEGER • RBRACKET EQ Primary
   45 Expr: ID LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 83


State 63

   46 Primary: ID •

    $default  reduce using rule 46 (Primary)


State 64

   48 Primary: INTEGER •

    $default  reduce using rule 48 (Primary)


State 65

   61 ParamList: Primary • $@3 ParamList

    $default  reduce using rule 60 ($@3)

    $@3  go to state 84


State 66

   44 Expr: ID LPAREN ParamList • RPAREN

    RPAREN  shift, and go to state 85


State 67

   30 Stmt: WRITE Expr SEMICOLON •

    $default  reduce using rule 30 (Stmt)


State 68

   13 FunDecl: FUNC Type ID • LPAREN $@1 ParamDecList RPAREN Block

    LPAREN  shift, and go to state 86


State 69

   32 IfStmt: IF LPAREN Condition • RPAREN Block Else

    RPAREN  shift, and go to state 87


State 70

   34 Condition: Primary • LOGICOP Primary

    LOGICOP  shift, and go to state 54


State 71

   58 Factor: LPAREN MathExpr RPAREN •

    $default  reduce using rule 58 (Factor)


State 72

   29 Stmt: RETURN Expr SEMICOLON •

    $default  reduce using rule 29 (Stmt)


State 73

    8 VarDecl: Type ID SEMICOLON •

    $default  reduce using rule 8 (VarDecl)


State 74

    9 VarDecl: Type ID LBRACKET • INTEGER RBRACKET SEMICOLON

    INTEGER  shift, and go to state 88


State 75

   19 Block: LCURLY • DeclList RCURLY

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    MINUS      shift, and go to state 8
    LPAREN     shift, and go to state 9
    INT        shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    RETURN     shift, and go to state 13
    WRITELN    shift, and go to state 14
    CHARACTER  shift, and go to state 15

    $default  reduce using rule 4 (DeclList)

    DeclList     go to state 89
    Decl         go to state 18
    VarDecl      go to state 19
    FunDeclList  go to state 20
    FunDecl      go to state 21
    Type         go to state 22
    StmtList     go to state 23
    Stmt         go to state 24
    IfStmt       go to state 25
    WhileLoop    go to state 26
    Condition    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    Primary      go to state 30
    MathExpr     go to state 31
    Trm          go to state 32
    Factor       go to state 33
    UnaryOp      go to state 34


State 76

   33 WhileLoop: Condition RPAREN Block •

    $default  reduce using rule 33 (WhileLoop)


State 77

   34 Condition: Primary LOGICOP Primary •

    $default  reduce using rule 34 (Condition)


State 78

   52 MathExpr: MathExpr PLUS Trm •
   54 Trm: Trm • TIMES Factor
   55    | Trm • DIVIDE Factor

    TIMES   shift, and go to state 57
    DIVIDE  shift, and go to state 58

    $default  reduce using rule 52 (MathExpr)


State 79

   51 MathExpr: MathExpr MINUS Trm •
   54 Trm: Trm • TIMES Factor
   55    | Trm • DIVIDE Factor

    TIMES   shift, and go to state 57
    DIVIDE  shift, and go to state 58

    $default  reduce using rule 51 (MathExpr)


State 80

   54 Trm: Trm TIMES Factor •

    $default  reduce using rule 54 (Trm)


State 81

   55 Trm: Trm DIVIDE Factor •

    $default  reduce using rule 55 (Trm)


State 82

   37 ArrayExpr: ID LBRACKET • INTEGER RBRACKET EQ Primary
   38          | ID EQ ID LBRACKET • INTEGER RBRACKET
   45 Expr: ID LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 90


State 83

   37 ArrayExpr: ID LBRACKET INTEGER RBRACKET • EQ Primary
   45 Expr: ID LBRACKET INTEGER RBRACKET •

    EQ  shift, and go to state 91

    $default  reduce using rule 45 (Expr)


State 84

   61 ParamList: Primary $@3 • ParamList

    ID         shift, and go to state 63
    INTEGER    shift, and go to state 64
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 15

    $default  reduce using rule 59 (ParamList)

    Primary    go to state 65
    ParamList  go to state 92


State 85

   44 Expr: ID LPAREN ParamList RPAREN •

    $default  reduce using rule 44 (Expr)


State 86

   13 FunDecl: FUNC Type ID LPAREN • $@1 ParamDecList RPAREN Block

    $default  reduce using rule 12 ($@1)

    $@1  go to state 93


State 87

   32 IfStmt: IF LPAREN Condition RPAREN • Block Else

    LCURLY  shift, and go to state 75

    Block  go to state 94


State 88

    9 VarDecl: Type ID LBRACKET INTEGER • RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 95


State 89

   19 Block: LCURLY DeclList • RCURLY

    RCURLY  shift, and go to state 96


State 90

   37 ArrayExpr: ID LBRACKET INTEGER • RBRACKET EQ Primary
   38          | ID EQ ID LBRACKET INTEGER • RBRACKET
   45 Expr: ID LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 97


State 91

   37 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ • Primary

    ID         shift, and go to state 63
    INTEGER    shift, and go to state 64
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 15

    Primary  go to state 98


State 92

   61 ParamList: Primary $@3 ParamList •

    $default  reduce using rule 61 (ParamList)


State 93

   13 FunDecl: FUNC Type ID LPAREN $@1 • ParamDecList RPAREN Block

    INT    shift, and go to state 10
    CHAR   shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 14 (ParamDecList)

    ParamDecList      go to state 99
    ParamDecListTail  go to state 100
    ParamDecl         go to state 101
    Type              go to state 102


State 94

   32 IfStmt: IF LPAREN Condition RPAREN Block • Else

    ELSE  shift, and go to state 103

    $default  reduce using rule 35 (Else)

    Else  go to state 104


State 95

    9 VarDecl: Type ID LBRACKET INTEGER RBRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 105


State 96

   19 Block: LCURLY DeclList RCURLY •

    $default  reduce using rule 19 (Block)


State 97

   37 ArrayExpr: ID LBRACKET INTEGER RBRACKET • EQ Primary
   38          | ID EQ ID LBRACKET INTEGER RBRACKET •
   45 Expr: ID LBRACKET INTEGER RBRACKET •

    EQ  shift, and go to state 91

    SEMICOLON  reduce using rule 38 (ArrayExpr)
    SEMICOLON  [reduce using rule 45 (Expr)]
    $default   reduce using rule 38 (ArrayExpr)


State 98

   37 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ Primary •

    $default  reduce using rule 37 (ArrayExpr)


State 99

   13 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList • RPAREN Block

    RPAREN  shift, and go to state 106


State 100

   15 ParamDecList: ParamDecListTail •

    $default  reduce using rule 15 (ParamDecList)


State 101

   16 ParamDecListTail: ParamDecl •
   17                 | ParamDecl • ParamDecListTail

    INT    shift, and go to state 10
    CHAR   shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 16 (ParamDecListTail)

    ParamDecListTail  go to state 107
    ParamDecl         go to state 101
    Type              go to state 102


State 102

   18 ParamDecl: Type • ID

    ID  shift, and go to state 108


State 103

   36 Else: ELSE • Block

    LCURLY  shift, and go to state 75

    Block  go to state 109


State 104

   32 IfStmt: IF LPAREN Condition RPAREN Block Else •

    $default  reduce using rule 32 (IfStmt)


State 105

    9 VarDecl: Type ID LBRACKET INTEGER RBRACKET SEMICOLON •

    $default  reduce using rule 9 (VarDecl)


State 106

   13 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN • Block

    LCURLY  shift, and go to state 75

    Block  go to state 110


State 107

   17 ParamDecListTail: ParamDecl ParamDecListTail •

    $default  reduce using rule 17 (ParamDecListTail)


State 108

   18 ParamDecl: Type ID •

    $default  reduce using rule 18 (ParamDecl)


State 109

   36 Else: ELSE Block •

    $default  reduce using rule 36 (Else)


State 110

   13 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN Block •

    $default  reduce using rule 13 (FunDecl)
