Rules useless in parser due to conflicts

   27 Stmt: RETURN Expr SEMICOLON


State 65 conflicts: 4 shift/reduce
State 66 conflicts: 4 shift/reduce
State 73 conflicts: 10 reduce/reduce
State 74 conflicts: 4 shift/reduce
State 80 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList FunDeclList

    2 VarDeclList: %empty
    3            | VarDecl VarDeclList

    4 VarDecl: Type ID SEMICOLON
    5        | ArrDecl

    6 ArrDecl: Type ID LBRACKET NUMBER RBRACKET SEMICOLON

    7 FunDeclList: FunDecl
    8            | FunDecl FunDeclList

    9 FunDecl: FUNC Type ID LPAREN ParamDecList RPAREN Block

   10 ParamDecList: %empty
   11             | ParamDecListTail

   12 ParamDecListTail: ParamDecl
   13                 | ParamDecl ParamDecListTail

   14 ParamDecl: Type ID
   15          | Type ID LBRACKET RBRACKET

   16 Block: LCURLY VarDeclList StmtList RCURLY

   17 Type: INT
   18     | FLOAT
   19     | CHAR

   20 StmtList: Stmt
   21         | Stmt StmtList

   22 Stmt: SEMICOLON
   23     | Expr SEMICOLON
   24     | RETURN Expr SEMICOLON
   25     | WRITE Expr SEMICOLON
   26     | WRITELN SEMICOLON
   27     | RETURN Expr SEMICOLON

   28 Expr: Primary
   29     | UnaryOp Expr
   30     | Expr BinOp Expr
   31     | ID EQ Expr
   32     | ID LPAREN ParamList RPAREN
   33     | ID LBRACKET Expr RBRACKET EQ Expr

   34 ParamList: %empty

   35 $@1: %empty

   36 ParamList: Primary $@1 ParamList

   37 Primary: ID
   38        | NUMBER
   39        | CHARACTER
   40        | LPAREN Expr RPAREN

   41 UnaryOp: MINUS

   42 BinOp: PLUS
   43      | MINUS
   44      | TIMES
   45      | DIVIDE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <string> (258) 4 6 9 14 15 31 32 33 37
    SEMICOLON <string> (259) 4 6 22 23 24 25 26 27
    EQ <string> (260) 31 33
    PLUS <string> (261) 42
    NUMBER <number> (262) 6 38
    WRITE <string> (263) 25
    FUNC <string> (264) 9
    MINUS <string> (265) 41 43
    TIMES <string> (266) 44
    DIVIDE <string> (267) 45
    LBRACKET <string> (268) 6 15 33
    RBRACKET <string> (269) 6 15 33
    LPAREN <string> (270) 9 32 40
    RPAREN <string> (271) 9 32 40
    LCURLY <string> (272) 16
    RCURLY <string> (273) 16
    INT <string> (274) 17
    CHAR <string> (275) 19
    FLOAT <string> (276) 18
    RETURN <string> (277) 24 27
    WRITELN <string> (278) 26
    CHARACTER <string> (279) 39


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    Program <ast> (26)
        on left: 1
        on right: 0
    VarDeclList <ast> (27)
        on left: 2 3
        on right: 1 3 16
    VarDecl <ast> (28)
        on left: 4 5
        on right: 3
    ArrDecl <ast> (29)
        on left: 6
        on right: 5
    FunDeclList <ast> (30)
        on left: 7 8
        on right: 1 8
    FunDecl <ast> (31)
        on left: 9
        on right: 7 8
    ParamDecList <ast> (32)
        on left: 10 11
        on right: 9
    ParamDecListTail <ast> (33)
        on left: 12 13
        on right: 11 13
    ParamDecl <ast> (34)
        on left: 14 15
        on right: 12 13
    Block <ast> (35)
        on left: 16
        on right: 9
    Type <ast> (36)
        on left: 17 18 19
        on right: 4 6 9 14 15
    StmtList <ast> (37)
        on left: 20 21
        on right: 16 21
    Stmt <ast> (38)
        on left: 22 23 24 25 26 27
        on right: 20 21
    Expr <ast> (39)
        on left: 28 29 30 31 32 33
        on right: 23 24 25 27 29 30 31 33 40
    ParamList <ast> (40)
        on left: 34 36
        on right: 32 36
    $@1 (41)
        on left: 35
        on right: 36
    Primary <ast> (42)
        on left: 37 38 39 40
        on right: 28 36
    UnaryOp <ast> (43)
        on left: 41
        on right: 29
    BinOp <ast> (44)
        on left: 42 43 44 45
        on right: 30


State 0

    0 $accept: . Program $end

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 2 (VarDeclList)

    Program      go to state 4
    VarDeclList  go to state 5
    VarDecl      go to state 6
    ArrDecl      go to state 7
    Type         go to state 8


State 1

   17 Type: INT .

    $default  reduce using rule 17 (Type)


State 2

   19 Type: CHAR .

    $default  reduce using rule 19 (Type)


State 3

   18 Type: FLOAT .

    $default  reduce using rule 18 (Type)


State 4

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 5

    1 Program: VarDeclList . FunDeclList

    FUNC  shift, and go to state 10

    FunDeclList  go to state 11
    FunDecl      go to state 12


State 6

    3 VarDeclList: VarDecl . VarDeclList

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 13
    VarDecl      go to state 6
    ArrDecl      go to state 7
    Type         go to state 8


State 7

    5 VarDecl: ArrDecl .

    $default  reduce using rule 5 (VarDecl)


State 8

    4 VarDecl: Type . ID SEMICOLON
    6 ArrDecl: Type . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 14


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    9 FunDecl: FUNC . Type ID LPAREN ParamDecList RPAREN Block

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    Type  go to state 15


State 11

    1 Program: VarDeclList FunDeclList .

    $default  reduce using rule 1 (Program)


State 12

    7 FunDeclList: FunDecl .
    8            | FunDecl . FunDeclList

    FUNC  shift, and go to state 10

    $default  reduce using rule 7 (FunDeclList)

    FunDeclList  go to state 16
    FunDecl      go to state 12


State 13

    3 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 3 (VarDeclList)


State 14

    4 VarDecl: Type ID . SEMICOLON
    6 ArrDecl: Type ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 17
    LBRACKET   shift, and go to state 18


State 15

    9 FunDecl: FUNC Type . ID LPAREN ParamDecList RPAREN Block

    ID  shift, and go to state 19


State 16

    8 FunDeclList: FunDecl FunDeclList .

    $default  reduce using rule 8 (FunDeclList)


State 17

    4 VarDecl: Type ID SEMICOLON .

    $default  reduce using rule 4 (VarDecl)


State 18

    6 ArrDecl: Type ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 20


State 19

    9 FunDecl: FUNC Type ID . LPAREN ParamDecList RPAREN Block

    LPAREN  shift, and go to state 21


State 20

    6 ArrDecl: Type ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 22


State 21

    9 FunDecl: FUNC Type ID LPAREN . ParamDecList RPAREN Block

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 10 (ParamDecList)

    ParamDecList      go to state 23
    ParamDecListTail  go to state 24
    ParamDecl         go to state 25
    Type              go to state 26


State 22

    6 ArrDecl: Type ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 27


State 23

    9 FunDecl: FUNC Type ID LPAREN ParamDecList . RPAREN Block

    RPAREN  shift, and go to state 28


State 24

   11 ParamDecList: ParamDecListTail .

    $default  reduce using rule 11 (ParamDecList)


State 25

   12 ParamDecListTail: ParamDecl .
   13                 | ParamDecl . ParamDecListTail

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 12 (ParamDecListTail)

    ParamDecListTail  go to state 29
    ParamDecl         go to state 25
    Type              go to state 26


State 26

   14 ParamDecl: Type . ID
   15          | Type . ID LBRACKET RBRACKET

    ID  shift, and go to state 30


State 27

    6 ArrDecl: Type ID LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 6 (ArrDecl)


State 28

    9 FunDecl: FUNC Type ID LPAREN ParamDecList RPAREN . Block

    LCURLY  shift, and go to state 31

    Block  go to state 32


State 29

   13 ParamDecListTail: ParamDecl ParamDecListTail .

    $default  reduce using rule 13 (ParamDecListTail)


State 30

   14 ParamDecl: Type ID .
   15          | Type ID . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 33

    $default  reduce using rule 14 (ParamDecl)


State 31

   16 Block: LCURLY . VarDeclList StmtList RCURLY

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 34
    VarDecl      go to state 6
    ArrDecl      go to state 7
    Type         go to state 8


State 32

    9 FunDecl: FUNC Type ID LPAREN ParamDecList RPAREN Block .

    $default  reduce using rule 9 (FunDecl)


State 33

   15 ParamDecl: Type ID LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 35


State 34

   16 Block: LCURLY VarDeclList . StmtList RCURLY

    ID         shift, and go to state 36
    SEMICOLON  shift, and go to state 37
    NUMBER     shift, and go to state 38
    WRITE      shift, and go to state 39
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    RETURN     shift, and go to state 42
    WRITELN    shift, and go to state 43
    CHARACTER  shift, and go to state 44

    StmtList  go to state 45
    Stmt      go to state 46
    Expr      go to state 47
    Primary   go to state 48
    UnaryOp   go to state 49


State 35

   15 ParamDecl: Type ID LBRACKET RBRACKET .

    $default  reduce using rule 15 (ParamDecl)


State 36

   31 Expr: ID . EQ Expr
   32     | ID . LPAREN ParamList RPAREN
   33     | ID . LBRACKET Expr RBRACKET EQ Expr
   37 Primary: ID .

    EQ        shift, and go to state 50
    LBRACKET  shift, and go to state 51
    LPAREN    shift, and go to state 52

    $default  reduce using rule 37 (Primary)


State 37

   22 Stmt: SEMICOLON .

    $default  reduce using rule 22 (Stmt)


State 38

   38 Primary: NUMBER .

    $default  reduce using rule 38 (Primary)


State 39

   25 Stmt: WRITE . Expr SEMICOLON

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 53
    Primary  go to state 48
    UnaryOp  go to state 49


State 40

   41 UnaryOp: MINUS .

    $default  reduce using rule 41 (UnaryOp)


State 41

   40 Primary: LPAREN . Expr RPAREN

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 54
    Primary  go to state 48
    UnaryOp  go to state 49


State 42

   24 Stmt: RETURN . Expr SEMICOLON
   27     | RETURN . Expr SEMICOLON

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 55
    Primary  go to state 48
    UnaryOp  go to state 49


State 43

   26 Stmt: WRITELN . SEMICOLON

    SEMICOLON  shift, and go to state 56


State 44

   39 Primary: CHARACTER .

    $default  reduce using rule 39 (Primary)


State 45

   16 Block: LCURLY VarDeclList StmtList . RCURLY

    RCURLY  shift, and go to state 57


State 46

   20 StmtList: Stmt .
   21         | Stmt . StmtList

    ID         shift, and go to state 36
    SEMICOLON  shift, and go to state 37
    NUMBER     shift, and go to state 38
    WRITE      shift, and go to state 39
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    RETURN     shift, and go to state 42
    WRITELN    shift, and go to state 43
    CHARACTER  shift, and go to state 44

    $default  reduce using rule 20 (StmtList)

    StmtList  go to state 58
    Stmt      go to state 46
    Expr      go to state 47
    Primary   go to state 48
    UnaryOp   go to state 49


State 47

   23 Stmt: Expr . SEMICOLON
   30 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 59
    PLUS       shift, and go to state 60
    MINUS      shift, and go to state 61
    TIMES      shift, and go to state 62
    DIVIDE     shift, and go to state 63

    BinOp  go to state 64


State 48

   28 Expr: Primary .

    $default  reduce using rule 28 (Expr)


State 49

   29 Expr: UnaryOp . Expr

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 65
    Primary  go to state 48
    UnaryOp  go to state 49


State 50

   31 Expr: ID EQ . Expr

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 66
    Primary  go to state 48
    UnaryOp  go to state 49


State 51

   33 Expr: ID LBRACKET . Expr RBRACKET EQ Expr

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 67
    Primary  go to state 48
    UnaryOp  go to state 49


State 52

   32 Expr: ID LPAREN . ParamList RPAREN

    ID         shift, and go to state 68
    NUMBER     shift, and go to state 38
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    $default  reduce using rule 34 (ParamList)

    ParamList  go to state 69
    Primary    go to state 70


State 53

   25 Stmt: WRITE Expr . SEMICOLON
   30 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 71
    PLUS       shift, and go to state 60
    MINUS      shift, and go to state 61
    TIMES      shift, and go to state 62
    DIVIDE     shift, and go to state 63

    BinOp  go to state 64


State 54

   30 Expr: Expr . BinOp Expr
   40 Primary: LPAREN Expr . RPAREN

    PLUS    shift, and go to state 60
    MINUS   shift, and go to state 61
    TIMES   shift, and go to state 62
    DIVIDE  shift, and go to state 63
    RPAREN  shift, and go to state 72

    BinOp  go to state 64


State 55

   24 Stmt: RETURN Expr . SEMICOLON
   27     | RETURN Expr . SEMICOLON
   30 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 73
    PLUS       shift, and go to state 60
    MINUS      shift, and go to state 61
    TIMES      shift, and go to state 62
    DIVIDE     shift, and go to state 63

    BinOp  go to state 64


State 56

   26 Stmt: WRITELN SEMICOLON .

    $default  reduce using rule 26 (Stmt)


State 57

   16 Block: LCURLY VarDeclList StmtList RCURLY .

    $default  reduce using rule 16 (Block)


State 58

   21 StmtList: Stmt StmtList .

    $default  reduce using rule 21 (StmtList)


State 59

   23 Stmt: Expr SEMICOLON .

    $default  reduce using rule 23 (Stmt)


State 60

   42 BinOp: PLUS .

    $default  reduce using rule 42 (BinOp)


State 61

   43 BinOp: MINUS .

    $default  reduce using rule 43 (BinOp)


State 62

   44 BinOp: TIMES .

    $default  reduce using rule 44 (BinOp)


State 63

   45 BinOp: DIVIDE .

    $default  reduce using rule 45 (BinOp)


State 64

   30 Expr: Expr BinOp . Expr

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 74
    Primary  go to state 48
    UnaryOp  go to state 49


State 65

   29 Expr: UnaryOp Expr .
   30     | Expr . BinOp Expr

    PLUS    shift, and go to state 60
    MINUS   shift, and go to state 61
    TIMES   shift, and go to state 62
    DIVIDE  shift, and go to state 63

    PLUS      [reduce using rule 29 (Expr)]
    MINUS     [reduce using rule 29 (Expr)]
    TIMES     [reduce using rule 29 (Expr)]
    DIVIDE    [reduce using rule 29 (Expr)]
    $default  reduce using rule 29 (Expr)

    BinOp  go to state 64


State 66

   30 Expr: Expr . BinOp Expr
   31     | ID EQ Expr .

    PLUS    shift, and go to state 60
    MINUS   shift, and go to state 61
    TIMES   shift, and go to state 62
    DIVIDE  shift, and go to state 63

    PLUS      [reduce using rule 31 (Expr)]
    MINUS     [reduce using rule 31 (Expr)]
    TIMES     [reduce using rule 31 (Expr)]
    DIVIDE    [reduce using rule 31 (Expr)]
    $default  reduce using rule 31 (Expr)

    BinOp  go to state 64


State 67

   30 Expr: Expr . BinOp Expr
   33     | ID LBRACKET Expr . RBRACKET EQ Expr

    PLUS      shift, and go to state 60
    MINUS     shift, and go to state 61
    TIMES     shift, and go to state 62
    DIVIDE    shift, and go to state 63
    RBRACKET  shift, and go to state 75

    BinOp  go to state 64


State 68

   37 Primary: ID .

    $default  reduce using rule 37 (Primary)


State 69

   32 Expr: ID LPAREN ParamList . RPAREN

    RPAREN  shift, and go to state 76


State 70

   36 ParamList: Primary . $@1 ParamList

    $default  reduce using rule 35 ($@1)

    $@1  go to state 77


State 71

   25 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 25 (Stmt)


State 72

   40 Primary: LPAREN Expr RPAREN .

    $default  reduce using rule 40 (Primary)


State 73

   24 Stmt: RETURN Expr SEMICOLON .
   27     | RETURN Expr SEMICOLON .

    ID         reduce using rule 24 (Stmt)
    ID         [reduce using rule 27 (Stmt)]
    SEMICOLON  reduce using rule 24 (Stmt)
    SEMICOLON  [reduce using rule 27 (Stmt)]
    NUMBER     reduce using rule 24 (Stmt)
    NUMBER     [reduce using rule 27 (Stmt)]
    WRITE      reduce using rule 24 (Stmt)
    WRITE      [reduce using rule 27 (Stmt)]
    MINUS      reduce using rule 24 (Stmt)
    MINUS      [reduce using rule 27 (Stmt)]
    LPAREN     reduce using rule 24 (Stmt)
    LPAREN     [reduce using rule 27 (Stmt)]
    RCURLY     reduce using rule 24 (Stmt)
    RCURLY     [reduce using rule 27 (Stmt)]
    RETURN     reduce using rule 24 (Stmt)
    RETURN     [reduce using rule 27 (Stmt)]
    WRITELN    reduce using rule 24 (Stmt)
    WRITELN    [reduce using rule 27 (Stmt)]
    CHARACTER  reduce using rule 24 (Stmt)
    CHARACTER  [reduce using rule 27 (Stmt)]
    $default   reduce using rule 24 (Stmt)


State 74

   30 Expr: Expr . BinOp Expr
   30     | Expr BinOp Expr .

    PLUS    shift, and go to state 60
    MINUS   shift, and go to state 61
    TIMES   shift, and go to state 62
    DIVIDE  shift, and go to state 63

    PLUS      [reduce using rule 30 (Expr)]
    MINUS     [reduce using rule 30 (Expr)]
    TIMES     [reduce using rule 30 (Expr)]
    DIVIDE    [reduce using rule 30 (Expr)]
    $default  reduce using rule 30 (Expr)

    BinOp  go to state 64


State 75

   33 Expr: ID LBRACKET Expr RBRACKET . EQ Expr

    EQ  shift, and go to state 78


State 76

   32 Expr: ID LPAREN ParamList RPAREN .

    $default  reduce using rule 32 (Expr)


State 77

   36 ParamList: Primary $@1 . ParamList

    ID         shift, and go to state 68
    NUMBER     shift, and go to state 38
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    $default  reduce using rule 34 (ParamList)

    ParamList  go to state 79
    Primary    go to state 70


State 78

   33 Expr: ID LBRACKET Expr RBRACKET EQ . Expr

    ID         shift, and go to state 36
    NUMBER     shift, and go to state 38
    MINUS      shift, and go to state 40
    LPAREN     shift, and go to state 41
    CHARACTER  shift, and go to state 44

    Expr     go to state 80
    Primary  go to state 48
    UnaryOp  go to state 49


State 79

   36 ParamList: Primary $@1 ParamList .

    $default  reduce using rule 36 (ParamList)


State 80

   30 Expr: Expr . BinOp Expr
   33     | ID LBRACKET Expr RBRACKET EQ Expr .

    PLUS    shift, and go to state 60
    MINUS   shift, and go to state 61
    TIMES   shift, and go to state 62
    DIVIDE  shift, and go to state 63

    PLUS      [reduce using rule 33 (Expr)]
    MINUS     [reduce using rule 33 (Expr)]
    TIMES     [reduce using rule 33 (Expr)]
    DIVIDE    [reduce using rule 33 (Expr)]
    $default  reduce using rule 33 (Expr)

    BinOp  go to state 64
