Nonterminals useless in grammar

    VarDeclList
    BinOp


Rules useless in grammar

   65 VarDeclList: %empty
   66            | VarDecl VarDeclList
   67            | VarDecl

   68 BinOp: PLUS
   69      | MINUS
   70      | TIMES
   71      | DIVIDE


State 1 conflicts: 1 reduce/reduce
State 2 conflicts: 1 reduce/reduce
State 25 conflicts: 12 shift/reduce
State 59 conflicts: 1 reduce/reduce
State 97 conflicts: 1 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl
    4         | FunDeclList

    5 Decl: VarDecl
    6     | StmtList

    7 VarDecl: Type ID SEMICOLON
    8        | Type ID LBRACKET INTEGER RBRACKET SEMICOLON

    9 FunDeclList: FunDecl
   10            | FunDecl FunDeclList

   11 $@1: %empty

   12 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN Block

   13 ParamDecList: %empty
   14             | ParamDecListTail

   15 ParamDecListTail: ParamDecl
   16                 | ParamDecl ParamDecListTail

   17 ParamDecl: Type ID

   18 Block: LCURLY DeclList RCURLY

   19 Type: INT
   20     | FLOAT
   21     | CHAR

   22 StmtList: Stmt
   23         | Stmt StmtList

   24 Stmt: SEMICOLON
   25     | WhileLoop
   26     | IfStmt
   27     | Expr SEMICOLON
   28     | RETURN Expr SEMICOLON
   29     | WRITE Expr SEMICOLON
   30     | WRITELN SEMICOLON

   31 $@2: %empty

   32 IfStmt: IF LPAREN Condition RPAREN Block $@2 Else

   33 Else: %empty
   34     | ELSE Block

   35 $@3: %empty

   36 WhileLoop: WHILE LPAREN $@3 Condition RPAREN Block

   37 Condition: Primary LOGICOP Primary

   38 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ Primary
   39          | ID EQ ID LBRACKET INTEGER RBRACKET

   40 Expr: Primary
   41     | MathExpr
   42     | ArrayExpr
   43     | FunCall
   44     | UnaryOp Expr
   45     | ID EQ Expr
   46     | ID LBRACKET INTEGER RBRACKET

   47 FunCall: ID LPAREN ParamList RPAREN

   48 Primary: ID
   49        | DECIMAL
   50        | INTEGER
   51        | CHARACTER

   52 MathExpr: Trm
   53         | MathExpr MINUS Trm
   54         | MathExpr PLUS Trm

   55 Trm: Factor
   56    | Trm TIMES Factor
   57    | Trm DIVIDE Factor

   58 Factor: ID
   59       | INTEGER
   60       | LPAREN MathExpr RPAREN

   61 ParamList: %empty

   62 $@4: %empty

   63 ParamList: Primary $@4 ParamList

   64 UnaryOp: MINUS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <string> (258) 7 8 12 17 38 39 45 46 47 48 58
    INTEGER <number> (259) 8 38 39 46 50 59
    DECIMAL <floatValue> (260) 49
    SEMICOLON <string> (261) 7 8 24 27 28 29 30
    EQ <string> (262) 38 39 45
    WRITE <string> (263) 29
    FUNC <string> (264) 12
    IF <string> (265) 32
    ELSE <string> (266) 34
    WHILE <string> (267) 36
    PLUS <string> (268) 54
    MINUS <string> (269) 53 64
    TIMES <string> (270) 56
    DIVIDE <string> (271) 57
    LOGICOP <string> (272) 37
    LBRACKET <string> (273) 8 38 39 46
    RBRACKET <string> (274) 8 38 39 46
    LPAREN <string> (275) 12 32 36 47 60
    RPAREN <string> (276) 12 32 36 47 60
    LCURLY <string> (277) 18
    RCURLY <string> (278) 18
    INT <string> (279) 19
    CHAR <string> (280) 21
    FLOAT <string> (281) 20
    RETURN <string> (282) 28
    WRITELN <string> (283) 30
    CHARACTER <string> (284) 51


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Program <ast> (31)
        on left: 1
        on right: 0
    DeclList <ast> (32)
        on left: 2 3 4
        on right: 1 2 18
    Decl <ast> (33)
        on left: 5 6
        on right: 2 3
    VarDecl <ast> (34)
        on left: 7 8
        on right: 5
    FunDeclList <ast> (35)
        on left: 9 10
        on right: 4 10
    FunDecl <ast> (36)
        on left: 12
        on right: 9 10
    $@1 (37)
        on left: 11
        on right: 12
    ParamDecList <ast> (38)
        on left: 13 14
        on right: 12
    ParamDecListTail <ast> (39)
        on left: 15 16
        on right: 14 16
    ParamDecl <ast> (40)
        on left: 17
        on right: 15 16
    Block <ast> (41)
        on left: 18
        on right: 12 32 34 36
    Type <ast> (42)
        on left: 19 20 21
        on right: 7 8 12 17
    StmtList <ast> (43)
        on left: 22 23
        on right: 6 23
    Stmt <ast> (44)
        on left: 24 25 26 27 28 29 30
        on right: 22 23
    IfStmt <ast> (45)
        on left: 32
        on right: 26
    $@2 (46)
        on left: 31
        on right: 32
    Else <ast> (47)
        on left: 33 34
        on right: 32
    WhileLoop <ast> (48)
        on left: 36
        on right: 25
    $@3 (49)
        on left: 35
        on right: 36
    Condition <ast> (50)
        on left: 37
        on right: 32 36
    ArrayExpr <ast> (51)
        on left: 38 39
        on right: 42
    Expr <ast> (52)
        on left: 40 41 42 43 44 45 46
        on right: 27 28 29 44 45
    FunCall <ast> (53)
        on left: 47
        on right: 43
    Primary <ast> (54)
        on left: 48 49 50 51
        on right: 37 38 40 63
    MathExpr <ast> (55)
        on left: 52 53 54
        on right: 41 53 54 60
    Trm <ast> (56)
        on left: 55 56 57
        on right: 52 53 54 56 57
    Factor <ast> (57)
        on left: 58 59 60
        on right: 55 56 57
    ParamList <ast> (58)
        on left: 61 63
        on right: 47 63
    $@4 (59)
        on left: 62
        on right: 63
    UnaryOp <ast> (60)
        on left: 64
        on right: 44


State 0

    0 $accept: . Program $end

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    WHILE      shift, and go to state 8
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    INT        shift, and go to state 11
    CHAR       shift, and go to state 12
    FLOAT      shift, and go to state 13
    RETURN     shift, and go to state 14
    WRITELN    shift, and go to state 15
    CHARACTER  shift, and go to state 16

    Program      go to state 17
    DeclList     go to state 18
    Decl         go to state 19
    VarDecl      go to state 20
    FunDeclList  go to state 21
    FunDecl      go to state 22
    Type         go to state 23
    StmtList     go to state 24
    Stmt         go to state 25
    IfStmt       go to state 26
    WhileLoop    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    FunCall      go to state 30
    Primary      go to state 31
    MathExpr     go to state 32
    Trm          go to state 33
    Factor       go to state 34
    UnaryOp      go to state 35


State 1

   38 ArrayExpr: ID . LBRACKET INTEGER RBRACKET EQ Primary
   39          | ID . EQ ID LBRACKET INTEGER RBRACKET
   45 Expr: ID . EQ Expr
   46     | ID . LBRACKET INTEGER RBRACKET
   47 FunCall: ID . LPAREN ParamList RPAREN
   48 Primary: ID .
   58 Factor: ID .

    EQ        shift, and go to state 36
    LBRACKET  shift, and go to state 37
    LPAREN    shift, and go to state 38

    SEMICOLON  reduce using rule 48 (Primary)
    SEMICOLON  [reduce using rule 58 (Factor)]
    $default   reduce using rule 58 (Factor)


State 2

   50 Primary: INTEGER .
   59 Factor: INTEGER .

    SEMICOLON  reduce using rule 50 (Primary)
    SEMICOLON  [reduce using rule 59 (Factor)]
    $default   reduce using rule 59 (Factor)


State 3

   49 Primary: DECIMAL .

    $default  reduce using rule 49 (Primary)


State 4

   24 Stmt: SEMICOLON .

    $default  reduce using rule 24 (Stmt)


State 5

   29 Stmt: WRITE . Expr SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    CHARACTER  shift, and go to state 16

    ArrayExpr  go to state 28
    Expr       go to state 39
    FunCall    go to state 30
    Primary    go to state 31
    MathExpr   go to state 32
    Trm        go to state 33
    Factor     go to state 34
    UnaryOp    go to state 35


State 6

   12 FunDecl: FUNC . Type ID LPAREN $@1 ParamDecList RPAREN Block

    INT    shift, and go to state 11
    CHAR   shift, and go to state 12
    FLOAT  shift, and go to state 13

    Type  go to state 40


State 7

   32 IfStmt: IF . LPAREN Condition RPAREN Block $@2 Else

    LPAREN  shift, and go to state 41


State 8

   36 WhileLoop: WHILE . LPAREN $@3 Condition RPAREN Block

    LPAREN  shift, and go to state 42


State 9

   64 UnaryOp: MINUS .

    $default  reduce using rule 64 (UnaryOp)


State 10

   60 Factor: LPAREN . MathExpr RPAREN

    ID       shift, and go to state 43
    INTEGER  shift, and go to state 44
    LPAREN   shift, and go to state 10

    MathExpr  go to state 45
    Trm       go to state 33
    Factor    go to state 34


State 11

   19 Type: INT .

    $default  reduce using rule 19 (Type)


State 12

   21 Type: CHAR .

    $default  reduce using rule 21 (Type)


State 13

   20 Type: FLOAT .

    $default  reduce using rule 20 (Type)


State 14

   28 Stmt: RETURN . Expr SEMICOLON

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    CHARACTER  shift, and go to state 16

    ArrayExpr  go to state 28
    Expr       go to state 46
    FunCall    go to state 30
    Primary    go to state 31
    MathExpr   go to state 32
    Trm        go to state 33
    Factor     go to state 34
    UnaryOp    go to state 35


State 15

   30 Stmt: WRITELN . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 16

   51 Primary: CHARACTER .

    $default  reduce using rule 51 (Primary)


State 17

    0 $accept: Program . $end

    $end  shift, and go to state 48


State 18

    1 Program: DeclList .

    $default  reduce using rule 1 (Program)


State 19

    2 DeclList: Decl . DeclList
    3         | Decl .

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    WHILE      shift, and go to state 8
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    INT        shift, and go to state 11
    CHAR       shift, and go to state 12
    FLOAT      shift, and go to state 13
    RETURN     shift, and go to state 14
    WRITELN    shift, and go to state 15
    CHARACTER  shift, and go to state 16

    $default  reduce using rule 3 (DeclList)

    DeclList     go to state 49
    Decl         go to state 19
    VarDecl      go to state 20
    FunDeclList  go to state 21
    FunDecl      go to state 22
    Type         go to state 23
    StmtList     go to state 24
    Stmt         go to state 25
    IfStmt       go to state 26
    WhileLoop    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    FunCall      go to state 30
    Primary      go to state 31
    MathExpr     go to state 32
    Trm          go to state 33
    Factor       go to state 34
    UnaryOp      go to state 35


State 20

    5 Decl: VarDecl .

    $default  reduce using rule 5 (Decl)


State 21

    4 DeclList: FunDeclList .

    $default  reduce using rule 4 (DeclList)


State 22

    9 FunDeclList: FunDecl .
   10            | FunDecl . FunDeclList

    FUNC  shift, and go to state 6

    $default  reduce using rule 9 (FunDeclList)

    FunDeclList  go to state 50
    FunDecl      go to state 22


State 23

    7 VarDecl: Type . ID SEMICOLON
    8        | Type . ID LBRACKET INTEGER RBRACKET SEMICOLON

    ID  shift, and go to state 51


State 24

    6 Decl: StmtList .

    $default  reduce using rule 6 (Decl)


State 25

   22 StmtList: Stmt .
   23         | Stmt . StmtList

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    IF         shift, and go to state 7
    WHILE      shift, and go to state 8
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    RETURN     shift, and go to state 14
    WRITELN    shift, and go to state 15
    CHARACTER  shift, and go to state 16

    ID         [reduce using rule 22 (StmtList)]
    INTEGER    [reduce using rule 22 (StmtList)]
    DECIMAL    [reduce using rule 22 (StmtList)]
    SEMICOLON  [reduce using rule 22 (StmtList)]
    WRITE      [reduce using rule 22 (StmtList)]
    IF         [reduce using rule 22 (StmtList)]
    WHILE      [reduce using rule 22 (StmtList)]
    MINUS      [reduce using rule 22 (StmtList)]
    LPAREN     [reduce using rule 22 (StmtList)]
    RETURN     [reduce using rule 22 (StmtList)]
    WRITELN    [reduce using rule 22 (StmtList)]
    CHARACTER  [reduce using rule 22 (StmtList)]
    $default   reduce using rule 22 (StmtList)

    StmtList   go to state 52
    Stmt       go to state 25
    IfStmt     go to state 26
    WhileLoop  go to state 27
    ArrayExpr  go to state 28
    Expr       go to state 29
    FunCall    go to state 30
    Primary    go to state 31
    MathExpr   go to state 32
    Trm        go to state 33
    Factor     go to state 34
    UnaryOp    go to state 35


State 26

   26 Stmt: IfStmt .

    $default  reduce using rule 26 (Stmt)


State 27

   25 Stmt: WhileLoop .

    $default  reduce using rule 25 (Stmt)


State 28

   42 Expr: ArrayExpr .

    $default  reduce using rule 42 (Expr)


State 29

   27 Stmt: Expr . SEMICOLON

    SEMICOLON  shift, and go to state 53


State 30

   43 Expr: FunCall .

    $default  reduce using rule 43 (Expr)


State 31

   40 Expr: Primary .

    $default  reduce using rule 40 (Expr)


State 32

   41 Expr: MathExpr .
   53 MathExpr: MathExpr . MINUS Trm
   54         | MathExpr . PLUS Trm

    PLUS   shift, and go to state 54
    MINUS  shift, and go to state 55

    $default  reduce using rule 41 (Expr)


State 33

   52 MathExpr: Trm .
   56 Trm: Trm . TIMES Factor
   57    | Trm . DIVIDE Factor

    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 52 (MathExpr)


State 34

   55 Trm: Factor .

    $default  reduce using rule 55 (Trm)


State 35

   44 Expr: UnaryOp . Expr

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    CHARACTER  shift, and go to state 16

    ArrayExpr  go to state 28
    Expr       go to state 58
    FunCall    go to state 30
    Primary    go to state 31
    MathExpr   go to state 32
    Trm        go to state 33
    Factor     go to state 34
    UnaryOp    go to state 35


State 36

   39 ArrayExpr: ID EQ . ID LBRACKET INTEGER RBRACKET
   45 Expr: ID EQ . Expr

    ID         shift, and go to state 59
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    CHARACTER  shift, and go to state 16

    ArrayExpr  go to state 28
    Expr       go to state 60
    FunCall    go to state 30
    Primary    go to state 31
    MathExpr   go to state 32
    Trm        go to state 33
    Factor     go to state 34
    UnaryOp    go to state 35


State 37

   38 ArrayExpr: ID LBRACKET . INTEGER RBRACKET EQ Primary
   46 Expr: ID LBRACKET . INTEGER RBRACKET

    INTEGER  shift, and go to state 61


State 38

   47 FunCall: ID LPAREN . ParamList RPAREN

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    $default  reduce using rule 61 (ParamList)

    Primary    go to state 64
    ParamList  go to state 65


State 39

   29 Stmt: WRITE Expr . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 40

   12 FunDecl: FUNC Type . ID LPAREN $@1 ParamDecList RPAREN Block

    ID  shift, and go to state 67


State 41

   32 IfStmt: IF LPAREN . Condition RPAREN Block $@2 Else

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    Condition  go to state 68
    Primary    go to state 69


State 42

   36 WhileLoop: WHILE LPAREN . $@3 Condition RPAREN Block

    $default  reduce using rule 35 ($@3)

    $@3  go to state 70


State 43

   58 Factor: ID .

    $default  reduce using rule 58 (Factor)


State 44

   59 Factor: INTEGER .

    $default  reduce using rule 59 (Factor)


State 45

   53 MathExpr: MathExpr . MINUS Trm
   54         | MathExpr . PLUS Trm
   60 Factor: LPAREN MathExpr . RPAREN

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    RPAREN  shift, and go to state 71


State 46

   28 Stmt: RETURN Expr . SEMICOLON

    SEMICOLON  shift, and go to state 72


State 47

   30 Stmt: WRITELN SEMICOLON .

    $default  reduce using rule 30 (Stmt)


State 48

    0 $accept: Program $end .

    $default  accept


State 49

    2 DeclList: Decl DeclList .

    $default  reduce using rule 2 (DeclList)


State 50

   10 FunDeclList: FunDecl FunDeclList .

    $default  reduce using rule 10 (FunDeclList)


State 51

    7 VarDecl: Type ID . SEMICOLON
    8        | Type ID . LBRACKET INTEGER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 73
    LBRACKET   shift, and go to state 74


State 52

   23 StmtList: Stmt StmtList .

    $default  reduce using rule 23 (StmtList)


State 53

   27 Stmt: Expr SEMICOLON .

    $default  reduce using rule 27 (Stmt)


State 54

   54 MathExpr: MathExpr PLUS . Trm

    ID       shift, and go to state 43
    INTEGER  shift, and go to state 44
    LPAREN   shift, and go to state 10

    Trm     go to state 75
    Factor  go to state 34


State 55

   53 MathExpr: MathExpr MINUS . Trm

    ID       shift, and go to state 43
    INTEGER  shift, and go to state 44
    LPAREN   shift, and go to state 10

    Trm     go to state 76
    Factor  go to state 34


State 56

   56 Trm: Trm TIMES . Factor

    ID       shift, and go to state 43
    INTEGER  shift, and go to state 44
    LPAREN   shift, and go to state 10

    Factor  go to state 77


State 57

   57 Trm: Trm DIVIDE . Factor

    ID       shift, and go to state 43
    INTEGER  shift, and go to state 44
    LPAREN   shift, and go to state 10

    Factor  go to state 78


State 58

   44 Expr: UnaryOp Expr .

    $default  reduce using rule 44 (Expr)


State 59

   38 ArrayExpr: ID . LBRACKET INTEGER RBRACKET EQ Primary
   39          | ID . EQ ID LBRACKET INTEGER RBRACKET
   39          | ID EQ ID . LBRACKET INTEGER RBRACKET
   45 Expr: ID . EQ Expr
   46     | ID . LBRACKET INTEGER RBRACKET
   47 FunCall: ID . LPAREN ParamList RPAREN
   48 Primary: ID .
   58 Factor: ID .

    EQ        shift, and go to state 36
    LBRACKET  shift, and go to state 79
    LPAREN    shift, and go to state 38

    SEMICOLON  reduce using rule 48 (Primary)
    SEMICOLON  [reduce using rule 58 (Factor)]
    $default   reduce using rule 58 (Factor)


State 60

   45 Expr: ID EQ Expr .

    $default  reduce using rule 45 (Expr)


State 61

   38 ArrayExpr: ID LBRACKET INTEGER . RBRACKET EQ Primary
   46 Expr: ID LBRACKET INTEGER . RBRACKET

    RBRACKET  shift, and go to state 80


State 62

   48 Primary: ID .

    $default  reduce using rule 48 (Primary)


State 63

   50 Primary: INTEGER .

    $default  reduce using rule 50 (Primary)


State 64

   63 ParamList: Primary . $@4 ParamList

    $default  reduce using rule 62 ($@4)

    $@4  go to state 81


State 65

   47 FunCall: ID LPAREN ParamList . RPAREN

    RPAREN  shift, and go to state 82


State 66

   29 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 29 (Stmt)


State 67

   12 FunDecl: FUNC Type ID . LPAREN $@1 ParamDecList RPAREN Block

    LPAREN  shift, and go to state 83


State 68

   32 IfStmt: IF LPAREN Condition . RPAREN Block $@2 Else

    RPAREN  shift, and go to state 84


State 69

   37 Condition: Primary . LOGICOP Primary

    LOGICOP  shift, and go to state 85


State 70

   36 WhileLoop: WHILE LPAREN $@3 . Condition RPAREN Block

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    Condition  go to state 86
    Primary    go to state 69


State 71

   60 Factor: LPAREN MathExpr RPAREN .

    $default  reduce using rule 60 (Factor)


State 72

   28 Stmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 28 (Stmt)


State 73

    7 VarDecl: Type ID SEMICOLON .

    $default  reduce using rule 7 (VarDecl)


State 74

    8 VarDecl: Type ID LBRACKET . INTEGER RBRACKET SEMICOLON

    INTEGER  shift, and go to state 87


State 75

   54 MathExpr: MathExpr PLUS Trm .
   56 Trm: Trm . TIMES Factor
   57    | Trm . DIVIDE Factor

    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 54 (MathExpr)


State 76

   53 MathExpr: MathExpr MINUS Trm .
   56 Trm: Trm . TIMES Factor
   57    | Trm . DIVIDE Factor

    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57

    $default  reduce using rule 53 (MathExpr)


State 77

   56 Trm: Trm TIMES Factor .

    $default  reduce using rule 56 (Trm)


State 78

   57 Trm: Trm DIVIDE Factor .

    $default  reduce using rule 57 (Trm)


State 79

   38 ArrayExpr: ID LBRACKET . INTEGER RBRACKET EQ Primary
   39          | ID EQ ID LBRACKET . INTEGER RBRACKET
   46 Expr: ID LBRACKET . INTEGER RBRACKET

    INTEGER  shift, and go to state 88


State 80

   38 ArrayExpr: ID LBRACKET INTEGER RBRACKET . EQ Primary
   46 Expr: ID LBRACKET INTEGER RBRACKET .

    EQ  shift, and go to state 89

    $default  reduce using rule 46 (Expr)


State 81

   63 ParamList: Primary $@4 . ParamList

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    $default  reduce using rule 61 (ParamList)

    Primary    go to state 64
    ParamList  go to state 90


State 82

   47 FunCall: ID LPAREN ParamList RPAREN .

    $default  reduce using rule 47 (FunCall)


State 83

   12 FunDecl: FUNC Type ID LPAREN . $@1 ParamDecList RPAREN Block

    $default  reduce using rule 11 ($@1)

    $@1  go to state 91


State 84

   32 IfStmt: IF LPAREN Condition RPAREN . Block $@2 Else

    LCURLY  shift, and go to state 92

    Block  go to state 93


State 85

   37 Condition: Primary LOGICOP . Primary

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    Primary  go to state 94


State 86

   36 WhileLoop: WHILE LPAREN $@3 Condition . RPAREN Block

    RPAREN  shift, and go to state 95


State 87

    8 VarDecl: Type ID LBRACKET INTEGER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 96


State 88

   38 ArrayExpr: ID LBRACKET INTEGER . RBRACKET EQ Primary
   39          | ID EQ ID LBRACKET INTEGER . RBRACKET
   46 Expr: ID LBRACKET INTEGER . RBRACKET

    RBRACKET  shift, and go to state 97


State 89

   38 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ . Primary

    ID         shift, and go to state 62
    INTEGER    shift, and go to state 63
    DECIMAL    shift, and go to state 3
    CHARACTER  shift, and go to state 16

    Primary  go to state 98


State 90

   63 ParamList: Primary $@4 ParamList .

    $default  reduce using rule 63 (ParamList)


State 91

   12 FunDecl: FUNC Type ID LPAREN $@1 . ParamDecList RPAREN Block

    INT    shift, and go to state 11
    CHAR   shift, and go to state 12
    FLOAT  shift, and go to state 13

    $default  reduce using rule 13 (ParamDecList)

    ParamDecList      go to state 99
    ParamDecListTail  go to state 100
    ParamDecl         go to state 101
    Type              go to state 102


State 92

   18 Block: LCURLY . DeclList RCURLY

    ID         shift, and go to state 1
    INTEGER    shift, and go to state 2
    DECIMAL    shift, and go to state 3
    SEMICOLON  shift, and go to state 4
    WRITE      shift, and go to state 5
    FUNC       shift, and go to state 6
    IF         shift, and go to state 7
    WHILE      shift, and go to state 8
    MINUS      shift, and go to state 9
    LPAREN     shift, and go to state 10
    INT        shift, and go to state 11
    CHAR       shift, and go to state 12
    FLOAT      shift, and go to state 13
    RETURN     shift, and go to state 14
    WRITELN    shift, and go to state 15
    CHARACTER  shift, and go to state 16

    DeclList     go to state 103
    Decl         go to state 19
    VarDecl      go to state 20
    FunDeclList  go to state 21
    FunDecl      go to state 22
    Type         go to state 23
    StmtList     go to state 24
    Stmt         go to state 25
    IfStmt       go to state 26
    WhileLoop    go to state 27
    ArrayExpr    go to state 28
    Expr         go to state 29
    FunCall      go to state 30
    Primary      go to state 31
    MathExpr     go to state 32
    Trm          go to state 33
    Factor       go to state 34
    UnaryOp      go to state 35


State 93

   32 IfStmt: IF LPAREN Condition RPAREN Block . $@2 Else

    $default  reduce using rule 31 ($@2)

    $@2  go to state 104


State 94

   37 Condition: Primary LOGICOP Primary .

    $default  reduce using rule 37 (Condition)


State 95

   36 WhileLoop: WHILE LPAREN $@3 Condition RPAREN . Block

    LCURLY  shift, and go to state 92

    Block  go to state 105


State 96

    8 VarDecl: Type ID LBRACKET INTEGER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 106


State 97

   38 ArrayExpr: ID LBRACKET INTEGER RBRACKET . EQ Primary
   39          | ID EQ ID LBRACKET INTEGER RBRACKET .
   46 Expr: ID LBRACKET INTEGER RBRACKET .

    EQ  shift, and go to state 89

    SEMICOLON  reduce using rule 39 (ArrayExpr)
    SEMICOLON  [reduce using rule 46 (Expr)]
    $default   reduce using rule 39 (ArrayExpr)


State 98

   38 ArrayExpr: ID LBRACKET INTEGER RBRACKET EQ Primary .

    $default  reduce using rule 38 (ArrayExpr)


State 99

   12 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList . RPAREN Block

    RPAREN  shift, and go to state 107


State 100

   14 ParamDecList: ParamDecListTail .

    $default  reduce using rule 14 (ParamDecList)


State 101

   15 ParamDecListTail: ParamDecl .
   16                 | ParamDecl . ParamDecListTail

    INT    shift, and go to state 11
    CHAR   shift, and go to state 12
    FLOAT  shift, and go to state 13

    $default  reduce using rule 15 (ParamDecListTail)

    ParamDecListTail  go to state 108
    ParamDecl         go to state 101
    Type              go to state 102


State 102

   17 ParamDecl: Type . ID

    ID  shift, and go to state 109


State 103

   18 Block: LCURLY DeclList . RCURLY

    RCURLY  shift, and go to state 110


State 104

   32 IfStmt: IF LPAREN Condition RPAREN Block $@2 . Else

    ELSE  shift, and go to state 111

    $default  reduce using rule 33 (Else)

    Else  go to state 112


State 105

   36 WhileLoop: WHILE LPAREN $@3 Condition RPAREN Block .

    $default  reduce using rule 36 (WhileLoop)


State 106

    8 VarDecl: Type ID LBRACKET INTEGER RBRACKET SEMICOLON .

    $default  reduce using rule 8 (VarDecl)


State 107

   12 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN . Block

    LCURLY  shift, and go to state 92

    Block  go to state 113


State 108

   16 ParamDecListTail: ParamDecl ParamDecListTail .

    $default  reduce using rule 16 (ParamDecListTail)


State 109

   17 ParamDecl: Type ID .

    $default  reduce using rule 17 (ParamDecl)


State 110

   18 Block: LCURLY DeclList RCURLY .

    $default  reduce using rule 18 (Block)


State 111

   34 Else: ELSE . Block

    LCURLY  shift, and go to state 92

    Block  go to state 114


State 112

   32 IfStmt: IF LPAREN Condition RPAREN Block $@2 Else .

    $default  reduce using rule 32 (IfStmt)


State 113

   12 FunDecl: FUNC Type ID LPAREN $@1 ParamDecList RPAREN Block .

    $default  reduce using rule 12 (FunDecl)


State 114

   34 Else: ELSE Block .

    $default  reduce using rule 34 (Else)
