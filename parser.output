Rules useless in parser due to conflicts

   29 Stmt: RETURN Expr SEMICOLON


State 67 conflicts: 4 shift/reduce
State 68 conflicts: 4 shift/reduce
State 75 conflicts: 10 reduce/reduce
State 76 conflicts: 4 shift/reduce
State 82 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 $@1: ε

    2 Program: VarDeclList $@1 FunDeclList

    3 VarDeclList: ε
    4            | VarDecl VarDeclList

    5 VarDecl: Type ID SEMICOLON
    6        | Type ID LBRACKET NUMBER RBRACKET SEMICOLON

    7 FunDeclList: FunDecl
    8            | FunDecl FunDeclList

    9 $@2: ε

   10 FunDecl: FUNC Type ID $@2 FuncRun

   11 FuncRun: LPAREN ParamDecList RPAREN Block

   12 ParamDecList: ε
   13             | ParamDecListTail

   14 ParamDecListTail: ParamDecl
   15                 | ParamDecl ParamDecListTail

   16 ParamDecl: Type ID
   17          | Type ID LBRACKET RBRACKET

   18 Block: LCURLY VarDeclList StmtList RCURLY

   19 Type: INT
   20     | FLOAT
   21     | CHAR

   22 StmtList: Stmt
   23         | Stmt StmtList

   24 Stmt: SEMICOLON
   25     | Expr SEMICOLON
   26     | RETURN Expr SEMICOLON
   27     | WRITE Expr SEMICOLON
   28     | WRITELN SEMICOLON
   29     | RETURN Expr SEMICOLON

   30 Expr: Primary
   31     | UnaryOp Expr
   32     | Expr BinOp Expr
   33     | ID EQ Expr
   34     | ID LPAREN ParamList RPAREN
   35     | ID LBRACKET Expr RBRACKET EQ Expr

   36 ParamList: ε

   37 $@3: ε

   38 ParamList: Primary $@3 ParamList

   39 Primary: ID
   40        | NUMBER
   41        | CHARACTER
   42        | LPAREN Expr RPAREN

   43 UnaryOp: MINUS

   44 BinOp: PLUS
   45      | MINUS
   46      | TIMES
   47      | DIVIDE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <string> (258) 5 6 10 16 17 33 34 35 39
    SEMICOLON <string> (259) 5 6 24 25 26 27 28 29
    EQ <string> (260) 33 35
    PLUS <string> (261) 44
    NUMBER <number> (262) 6 40
    WRITE <string> (263) 27
    FUNC <string> (264) 10
    MINUS <string> (265) 43 45
    TIMES <string> (266) 46
    DIVIDE <string> (267) 47
    LBRACKET <string> (268) 6 17 35
    RBRACKET <string> (269) 6 17 35
    LPAREN <string> (270) 11 34 42
    RPAREN <string> (271) 11 34 42
    LCURLY <string> (272) 18
    RCURLY <string> (273) 18
    INT <string> (274) 19
    CHAR <string> (275) 21
    FLOAT <string> (276) 20
    RETURN <string> (277) 26 29
    WRITELN <string> (278) 28
    CHARACTER <string> (279) 41


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    Program <ast> (26)
        on left: 2
        on right: 0
    $@1 (27)
        on left: 1
        on right: 2
    VarDeclList <ast> (28)
        on left: 3 4
        on right: 2 4 18
    VarDecl <ast> (29)
        on left: 5 6
        on right: 4
    FunDeclList <ast> (30)
        on left: 7 8
        on right: 2 8
    FunDecl <ast> (31)
        on left: 10
        on right: 7 8
    $@2 (32)
        on left: 9
        on right: 10
    FuncRun (33)
        on left: 11
        on right: 10
    ParamDecList <ast> (34)
        on left: 12 13
        on right: 11
    ParamDecListTail <ast> (35)
        on left: 14 15
        on right: 13 15
    ParamDecl <ast> (36)
        on left: 16 17
        on right: 14 15
    Block <ast> (37)
        on left: 18
        on right: 11
    Type <ast> (38)
        on left: 19 20 21
        on right: 5 6 10 16 17
    StmtList <ast> (39)
        on left: 22 23
        on right: 18 23
    Stmt <ast> (40)
        on left: 24 25 26 27 28 29
        on right: 22 23
    Expr <ast> (41)
        on left: 30 31 32 33 34 35
        on right: 25 26 27 29 31 32 33 35 42
    ParamList <ast> (42)
        on left: 36 38
        on right: 34 38
    $@3 (43)
        on left: 37
        on right: 38
    Primary <ast> (44)
        on left: 39 40 41 42
        on right: 30 38
    UnaryOp <ast> (45)
        on left: 43
        on right: 31
    BinOp <ast> (46)
        on left: 44 45 46 47
        on right: 32


State 0

    0 $accept: • Program $end

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 3 (VarDeclList)

    Program      go to state 4
    VarDeclList  go to state 5
    VarDecl      go to state 6
    Type         go to state 7


State 1

   19 Type: INT •

    $default  reduce using rule 19 (Type)


State 2

   21 Type: CHAR •

    $default  reduce using rule 21 (Type)


State 3

   20 Type: FLOAT •

    $default  reduce using rule 20 (Type)


State 4

    0 $accept: Program • $end

    $end  shift, and go to state 8


State 5

    2 Program: VarDeclList • $@1 FunDeclList

    $default  reduce using rule 1 ($@1)

    $@1  go to state 9


State 6

    4 VarDeclList: VarDecl • VarDeclList

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 3 (VarDeclList)

    VarDeclList  go to state 10
    VarDecl      go to state 6
    Type         go to state 7


State 7

    5 VarDecl: Type • ID SEMICOLON
    6        | Type • ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 11


State 8

    0 $accept: Program $end •

    $default  accept


State 9

    2 Program: VarDeclList $@1 • FunDeclList

    FUNC  shift, and go to state 12

    FunDeclList  go to state 13
    FunDecl      go to state 14


State 10

    4 VarDeclList: VarDecl VarDeclList •

    $default  reduce using rule 4 (VarDeclList)


State 11

    5 VarDecl: Type ID • SEMICOLON
    6        | Type ID • LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 15
    LBRACKET   shift, and go to state 16


State 12

   10 FunDecl: FUNC • Type ID $@2 FuncRun

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    Type  go to state 17


State 13

    2 Program: VarDeclList $@1 FunDeclList •

    $default  reduce using rule 2 (Program)


State 14

    7 FunDeclList: FunDecl •
    8            | FunDecl • FunDeclList

    FUNC  shift, and go to state 12

    $default  reduce using rule 7 (FunDeclList)

    FunDeclList  go to state 18
    FunDecl      go to state 14


State 15

    5 VarDecl: Type ID SEMICOLON •

    $default  reduce using rule 5 (VarDecl)


State 16

    6 VarDecl: Type ID LBRACKET • NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 19


State 17

   10 FunDecl: FUNC Type • ID $@2 FuncRun

    ID  shift, and go to state 20


State 18

    8 FunDeclList: FunDecl FunDeclList •

    $default  reduce using rule 8 (FunDeclList)


State 19

    6 VarDecl: Type ID LBRACKET NUMBER • RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 21


State 20

   10 FunDecl: FUNC Type ID • $@2 FuncRun

    $default  reduce using rule 9 ($@2)

    $@2  go to state 22


State 21

    6 VarDecl: Type ID LBRACKET NUMBER RBRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 23


State 22

   10 FunDecl: FUNC Type ID $@2 • FuncRun

    LPAREN  shift, and go to state 24

    FuncRun  go to state 25


State 23

    6 VarDecl: Type ID LBRACKET NUMBER RBRACKET SEMICOLON •

    $default  reduce using rule 6 (VarDecl)


State 24

   11 FuncRun: LPAREN • ParamDecList RPAREN Block

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 12 (ParamDecList)

    ParamDecList      go to state 26
    ParamDecListTail  go to state 27
    ParamDecl         go to state 28
    Type              go to state 29


State 25

   10 FunDecl: FUNC Type ID $@2 FuncRun •

    $default  reduce using rule 10 (FunDecl)


State 26

   11 FuncRun: LPAREN ParamDecList • RPAREN Block

    RPAREN  shift, and go to state 30


State 27

   13 ParamDecList: ParamDecListTail •

    $default  reduce using rule 13 (ParamDecList)


State 28

   14 ParamDecListTail: ParamDecl •
   15                 | ParamDecl • ParamDecListTail

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 14 (ParamDecListTail)

    ParamDecListTail  go to state 31
    ParamDecl         go to state 28
    Type              go to state 29


State 29

   16 ParamDecl: Type • ID
   17          | Type • ID LBRACKET RBRACKET

    ID  shift, and go to state 32


State 30

   11 FuncRun: LPAREN ParamDecList RPAREN • Block

    LCURLY  shift, and go to state 33

    Block  go to state 34


State 31

   15 ParamDecListTail: ParamDecl ParamDecListTail •

    $default  reduce using rule 15 (ParamDecListTail)


State 32

   16 ParamDecl: Type ID •
   17          | Type ID • LBRACKET RBRACKET

    LBRACKET  shift, and go to state 35

    $default  reduce using rule 16 (ParamDecl)


State 33

   18 Block: LCURLY • VarDeclList StmtList RCURLY

    INT    shift, and go to state 1
    CHAR   shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 3 (VarDeclList)

    VarDeclList  go to state 36
    VarDecl      go to state 6
    Type         go to state 7


State 34

   11 FuncRun: LPAREN ParamDecList RPAREN Block •

    $default  reduce using rule 11 (FuncRun)


State 35

   17 ParamDecl: Type ID LBRACKET • RBRACKET

    RBRACKET  shift, and go to state 37


State 36

   18 Block: LCURLY VarDeclList • StmtList RCURLY

    ID         shift, and go to state 38
    SEMICOLON  shift, and go to state 39
    NUMBER     shift, and go to state 40
    WRITE      shift, and go to state 41
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    RETURN     shift, and go to state 44
    WRITELN    shift, and go to state 45
    CHARACTER  shift, and go to state 46

    StmtList  go to state 47
    Stmt      go to state 48
    Expr      go to state 49
    Primary   go to state 50
    UnaryOp   go to state 51


State 37

   17 ParamDecl: Type ID LBRACKET RBRACKET •

    $default  reduce using rule 17 (ParamDecl)


State 38

   33 Expr: ID • EQ Expr
   34     | ID • LPAREN ParamList RPAREN
   35     | ID • LBRACKET Expr RBRACKET EQ Expr
   39 Primary: ID •

    EQ        shift, and go to state 52
    LBRACKET  shift, and go to state 53
    LPAREN    shift, and go to state 54

    $default  reduce using rule 39 (Primary)


State 39

   24 Stmt: SEMICOLON •

    $default  reduce using rule 24 (Stmt)


State 40

   40 Primary: NUMBER •

    $default  reduce using rule 40 (Primary)


State 41

   27 Stmt: WRITE • Expr SEMICOLON

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 55
    Primary  go to state 50
    UnaryOp  go to state 51


State 42

   43 UnaryOp: MINUS •

    $default  reduce using rule 43 (UnaryOp)


State 43

   42 Primary: LPAREN • Expr RPAREN

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 56
    Primary  go to state 50
    UnaryOp  go to state 51


State 44

   26 Stmt: RETURN • Expr SEMICOLON
   29     | RETURN • Expr SEMICOLON

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 57
    Primary  go to state 50
    UnaryOp  go to state 51


State 45

   28 Stmt: WRITELN • SEMICOLON

    SEMICOLON  shift, and go to state 58


State 46

   41 Primary: CHARACTER •

    $default  reduce using rule 41 (Primary)


State 47

   18 Block: LCURLY VarDeclList StmtList • RCURLY

    RCURLY  shift, and go to state 59


State 48

   22 StmtList: Stmt •
   23         | Stmt • StmtList

    ID         shift, and go to state 38
    SEMICOLON  shift, and go to state 39
    NUMBER     shift, and go to state 40
    WRITE      shift, and go to state 41
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    RETURN     shift, and go to state 44
    WRITELN    shift, and go to state 45
    CHARACTER  shift, and go to state 46

    $default  reduce using rule 22 (StmtList)

    StmtList  go to state 60
    Stmt      go to state 48
    Expr      go to state 49
    Primary   go to state 50
    UnaryOp   go to state 51


State 49

   25 Stmt: Expr • SEMICOLON
   32 Expr: Expr • BinOp Expr

    SEMICOLON  shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    TIMES      shift, and go to state 64
    DIVIDE     shift, and go to state 65

    BinOp  go to state 66


State 50

   30 Expr: Primary •

    $default  reduce using rule 30 (Expr)


State 51

   31 Expr: UnaryOp • Expr

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 67
    Primary  go to state 50
    UnaryOp  go to state 51


State 52

   33 Expr: ID EQ • Expr

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 68
    Primary  go to state 50
    UnaryOp  go to state 51


State 53

   35 Expr: ID LBRACKET • Expr RBRACKET EQ Expr

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 69
    Primary  go to state 50
    UnaryOp  go to state 51


State 54

   34 Expr: ID LPAREN • ParamList RPAREN

    ID         shift, and go to state 70
    NUMBER     shift, and go to state 40
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    $default  reduce using rule 36 (ParamList)

    ParamList  go to state 71
    Primary    go to state 72


State 55

   27 Stmt: WRITE Expr • SEMICOLON
   32 Expr: Expr • BinOp Expr

    SEMICOLON  shift, and go to state 73
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    TIMES      shift, and go to state 64
    DIVIDE     shift, and go to state 65

    BinOp  go to state 66


State 56

   32 Expr: Expr • BinOp Expr
   42 Primary: LPAREN Expr • RPAREN

    PLUS    shift, and go to state 62
    MINUS   shift, and go to state 63
    TIMES   shift, and go to state 64
    DIVIDE  shift, and go to state 65
    RPAREN  shift, and go to state 74

    BinOp  go to state 66


State 57

   26 Stmt: RETURN Expr • SEMICOLON
   29     | RETURN Expr • SEMICOLON
   32 Expr: Expr • BinOp Expr

    SEMICOLON  shift, and go to state 75
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    TIMES      shift, and go to state 64
    DIVIDE     shift, and go to state 65

    BinOp  go to state 66


State 58

   28 Stmt: WRITELN SEMICOLON •

    $default  reduce using rule 28 (Stmt)


State 59

   18 Block: LCURLY VarDeclList StmtList RCURLY •

    $default  reduce using rule 18 (Block)


State 60

   23 StmtList: Stmt StmtList •

    $default  reduce using rule 23 (StmtList)


State 61

   25 Stmt: Expr SEMICOLON •

    $default  reduce using rule 25 (Stmt)


State 62

   44 BinOp: PLUS •

    $default  reduce using rule 44 (BinOp)


State 63

   45 BinOp: MINUS •

    $default  reduce using rule 45 (BinOp)


State 64

   46 BinOp: TIMES •

    $default  reduce using rule 46 (BinOp)


State 65

   47 BinOp: DIVIDE •

    $default  reduce using rule 47 (BinOp)


State 66

   32 Expr: Expr BinOp • Expr

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 76
    Primary  go to state 50
    UnaryOp  go to state 51


State 67

   31 Expr: UnaryOp Expr •
   32     | Expr • BinOp Expr

    PLUS    shift, and go to state 62
    MINUS   shift, and go to state 63
    TIMES   shift, and go to state 64
    DIVIDE  shift, and go to state 65

    PLUS      [reduce using rule 31 (Expr)]
    MINUS     [reduce using rule 31 (Expr)]
    TIMES     [reduce using rule 31 (Expr)]
    DIVIDE    [reduce using rule 31 (Expr)]
    $default  reduce using rule 31 (Expr)

    BinOp  go to state 66


State 68

   32 Expr: Expr • BinOp Expr
   33     | ID EQ Expr •

    PLUS    shift, and go to state 62
    MINUS   shift, and go to state 63
    TIMES   shift, and go to state 64
    DIVIDE  shift, and go to state 65

    PLUS      [reduce using rule 33 (Expr)]
    MINUS     [reduce using rule 33 (Expr)]
    TIMES     [reduce using rule 33 (Expr)]
    DIVIDE    [reduce using rule 33 (Expr)]
    $default  reduce using rule 33 (Expr)

    BinOp  go to state 66


State 69

   32 Expr: Expr • BinOp Expr
   35     | ID LBRACKET Expr • RBRACKET EQ Expr

    PLUS      shift, and go to state 62
    MINUS     shift, and go to state 63
    TIMES     shift, and go to state 64
    DIVIDE    shift, and go to state 65
    RBRACKET  shift, and go to state 77

    BinOp  go to state 66


State 70

   39 Primary: ID •

    $default  reduce using rule 39 (Primary)


State 71

   34 Expr: ID LPAREN ParamList • RPAREN

    RPAREN  shift, and go to state 78


State 72

   38 ParamList: Primary • $@3 ParamList

    $default  reduce using rule 37 ($@3)

    $@3  go to state 79


State 73

   27 Stmt: WRITE Expr SEMICOLON •

    $default  reduce using rule 27 (Stmt)


State 74

   42 Primary: LPAREN Expr RPAREN •

    $default  reduce using rule 42 (Primary)


State 75

   26 Stmt: RETURN Expr SEMICOLON •
   29     | RETURN Expr SEMICOLON •

    ID         reduce using rule 26 (Stmt)
    ID         [reduce using rule 29 (Stmt)]
    SEMICOLON  reduce using rule 26 (Stmt)
    SEMICOLON  [reduce using rule 29 (Stmt)]
    NUMBER     reduce using rule 26 (Stmt)
    NUMBER     [reduce using rule 29 (Stmt)]
    WRITE      reduce using rule 26 (Stmt)
    WRITE      [reduce using rule 29 (Stmt)]
    MINUS      reduce using rule 26 (Stmt)
    MINUS      [reduce using rule 29 (Stmt)]
    LPAREN     reduce using rule 26 (Stmt)
    LPAREN     [reduce using rule 29 (Stmt)]
    RCURLY     reduce using rule 26 (Stmt)
    RCURLY     [reduce using rule 29 (Stmt)]
    RETURN     reduce using rule 26 (Stmt)
    RETURN     [reduce using rule 29 (Stmt)]
    WRITELN    reduce using rule 26 (Stmt)
    WRITELN    [reduce using rule 29 (Stmt)]
    CHARACTER  reduce using rule 26 (Stmt)
    CHARACTER  [reduce using rule 29 (Stmt)]
    $default   reduce using rule 26 (Stmt)


State 76

   32 Expr: Expr • BinOp Expr
   32     | Expr BinOp Expr •

    PLUS    shift, and go to state 62
    MINUS   shift, and go to state 63
    TIMES   shift, and go to state 64
    DIVIDE  shift, and go to state 65

    PLUS      [reduce using rule 32 (Expr)]
    MINUS     [reduce using rule 32 (Expr)]
    TIMES     [reduce using rule 32 (Expr)]
    DIVIDE    [reduce using rule 32 (Expr)]
    $default  reduce using rule 32 (Expr)

    BinOp  go to state 66


State 77

   35 Expr: ID LBRACKET Expr RBRACKET • EQ Expr

    EQ  shift, and go to state 80


State 78

   34 Expr: ID LPAREN ParamList RPAREN •

    $default  reduce using rule 34 (Expr)


State 79

   38 ParamList: Primary $@3 • ParamList

    ID         shift, and go to state 70
    NUMBER     shift, and go to state 40
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    $default  reduce using rule 36 (ParamList)

    ParamList  go to state 81
    Primary    go to state 72


State 80

   35 Expr: ID LBRACKET Expr RBRACKET EQ • Expr

    ID         shift, and go to state 38
    NUMBER     shift, and go to state 40
    MINUS      shift, and go to state 42
    LPAREN     shift, and go to state 43
    CHARACTER  shift, and go to state 46

    Expr     go to state 82
    Primary  go to state 50
    UnaryOp  go to state 51


State 81

   38 ParamList: Primary $@3 ParamList •

    $default  reduce using rule 38 (ParamList)


State 82

   32 Expr: Expr • BinOp Expr
   35     | ID LBRACKET Expr RBRACKET EQ Expr •

    PLUS    shift, and go to state 62
    MINUS   shift, and go to state 63
    TIMES   shift, and go to state 64
    DIVIDE  shift, and go to state 65

    PLUS      [reduce using rule 35 (Expr)]
    MINUS     [reduce using rule 35 (Expr)]
    TIMES     [reduce using rule 35 (Expr)]
    DIVIDE    [reduce using rule 35 (Expr)]
    $default  reduce using rule 35 (Expr)

    BinOp  go to state 66
